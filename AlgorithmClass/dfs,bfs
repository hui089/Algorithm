class Node{
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;
    }  
}


class BST{
    constructor(){
        this.root= null;
    }
    insert(value){
        var newNode = new Node(value);
        if(this.root == null) {this.root = newNode; return this;}
        else {
            var current = this.root;
            while(true){
                if(value < current.value){       
                    if(current.left === null){
                      current.left=newNode;
                      return this;
                    }
                    else{
                        current = current.left;
                    }
                }
                else if(value >= current.value){
                     if(current.right == null){
                      current.right=newNode;
                      return this;
                    }
                    else{
                        current = current.right;
                    }
                }
            }
        }
        
        return this;
    }
    
    find(value){
        if(!this.root) return false;
        var current = this.root;
            found = false;
        while(current && !found){
            if(value < current.value)
                current = current.left;
            else if(value>current.value)
                current = current.right;
            else{
                found == true;
            }
        }
        if(!found) return false;
        return current;
    }
		BFS(){
		     var data = [];//마지막에 출력할 값   
		     var queue = [];
		     var node = this.root;
		     queue.push(node);
		     while(queue.length){ // 0은 false의 값
		         //큐에 값이 있을 때
		         node = queue.shift();
		        data.push(node);
		        if(node.left) queue.push(node.left);
		        if(node.right) queue.push(node.right);
        
         
		    } return data;
		    }

		DFS_Preorder(){
		        var data = [];
		        var current = this.root;
		        function traverse(node){
		            data.push(node);
		            if(node.left) traverse(node.left);
		            if(node.right)traverse(node.right);
		        }
		        traverse(current);
		        return data;
		    }

		DFS_Postorder(){
		        var data = [];
		        var current = this.root;
		        function traverse(node){
            
		            if(node.left) traverse(node.left);
		            if(node.right) traverse(node.right);
		            data.push(node);
		        }
		        traverse(current);
		        return data;
		    }

		DFS_Inorder(){
		        var data = [];
		        var current = this.root;
		        function traverse(node){        
		            node.left && traverse(node.left);
								data.push(node);
		            node.right && traverse(node.right);            
		        }
		        traverse(current);
		        return data;
		    }

}
